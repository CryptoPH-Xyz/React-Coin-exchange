{"version":3,"sources":["components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AppHeader/logo.svg","components/AppHeader/AppHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section1","styled","section","AccountBalance","props","buttonText","showBalance","balance","amount","className","onClick","handleBalance","RowDetails","td","Coin","name","ticker","price","action","method","event","preventDefault","handleRefresh","TitleDetails","th","Table","table","CoinList","coinData","map","key","Header","header","H1","h1","P","p","Image","img","Appheader","src","logo","alt","Div","div","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","parseFloat","Number","quotes","USD","toFixed","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3737258b.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Section1 = styled.section`\r\n    margin: auto;\r\n    box-shadow: 2px 2px 7px 1px black;\r\n    background-color: rgb(253, 239, 218);\r\n    float: center;\r\n    font-size: 1.5rem;\r\n    box-sizing: content-box;\r\n    font-weight: bold;\r\n`;\r\n\r\nexport default function AccountBalance(props) {\r\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\r\n\r\n    let balance = props.showBalance ?\r\n    <>Current Balance is: ${props.amount}</>\r\n    : null\r\n\r\n    return (\r\n        <Section1 className = \"balance\">\r\n            {balance}\r\n            <button onClick = {props.handleBalance}>{buttonText}</button>\r\n        </Section1>\r\n    );\r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RowDetails = styled.td`\r\n    border: 2px solid burlywood;\r\n    width: 25vh;\r\n    background-color: white;\r\n`;\r\n\r\n\r\nexport default function Coin(props) {\r\n\r\n    const handleClick = (event) => {\r\n    // Prevent the default action of submitting the form\r\n        event.preventDefault();\r\n        props.handleRefresh(props.ticker);\r\n\r\n    }\r\n\r\n    return (\r\n    <tr>\r\n        <RowDetails>{props.name}</RowDetails>\r\n        <RowDetails>{props.ticker}</RowDetails>\r\n        <RowDetails>${props.price}</RowDetails>\r\n        {props.showBalance ?\r\n            <RowDetails>{props.balance}</RowDetails> : null}\r\n        <RowDetails>\r\n            <form action = \"#\" method = \"POST\">\r\n                <button onClick = {handleClick}>Refresh</button>\r\n            </form>\r\n        </RowDetails>\r\n    </tr>\r\n    )\r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}\r\n","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst TitleDetails = styled.th`\r\n    border: 2px solid burlywood;\r\n    width: 25vh;\r\n    background-color: black;\r\n    color: white;\r\n`;\r\n\r\nconst Table = styled.table`\r\n    margin: 20px auto 20px auto;\r\n    display: inline-block;\r\n    font-size: 1.5rem;\r\n`;\r\n\r\nexport default function CoinList(props) {\r\n    return (\r\n        <Table>\r\n        <thead>\r\n            <tr>\r\n            <TitleDetails>Name</TitleDetails>\r\n            <TitleDetails>Ticker</TitleDetails>\r\n            <TitleDetails>Price</TitleDetails>\r\n            {props.showBalance ?\r\n                <TitleDetails>Balance</TitleDetails> : null}\r\n            <TitleDetails>Actions</TitleDetails>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n            props.coinData.map(({key, name, ticker, price, balance}) =>\r\n                <Coin key={key}\r\n                handleRefresh = {props.handleRefresh} \r\n                name={name} \r\n                ticker={ticker} \r\n                price={price}\r\n                balance = {balance}\r\n                showBalance={props.showBalance}\r\n                />\r\n                )\r\n            }\r\n        </tbody>\r\n        </Table>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\n\r\nconst Header = styled.header`\r\n    background-color: #030011;\r\n    min-height: 20vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: inherit;\r\n    justify-content: flex-start;\r\n    color: white;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 4rem;\r\n    font-style: oblique;\r\n    font-family: Georgia, 'Times New Roman', Times, serif;\r\n`;\r\n\r\nconst P = styled.p`\r\n    font-size: 1.5rem;\r\n    font-style: normal;\r\n    font-family: 'Lucida Sans Regul';\r\n`;\r\n\r\nconst Image = styled.img`\r\n    height: 20vmin;\r\n    pointer-events: none;\r\n`;\r\n\r\nexport default function Appheader() {\r\n    return (\r\n        <Header>\r\n        <Image src={logo} alt=\"React logo\" />\r\n        <H1>\r\n            Coin Exchange\r\n        </H1>\r\n        <P className = \"App-subtitle\">\r\n            by: Xyz Fiegalan\r\n        </P>\r\n        </Header>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport AppHeader from './components/AppHeader/AppHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: lightblue;\n`;\n\nfunction App(props) {\n\n  // const [balance, setBalance] = useState(10000); use for adding money purposes\n  const balance = 50000;\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, 10).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id)); //key will fetch the endpoints for each coin\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: parseFloat(Number(coin.quotes.USD.price).toFixed(4))\n      }\n    })\n    setCoinData(coinPriceData)\n  }\n\n  useEffect(function() {\n    if(coinData.length === 0) {\n      componentDidMount();\n    }\n  });\n\n  const handleBalance = () => {\n    setShowBalance(oldValue => !oldValue)\n  }\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = parseFloat(Number(response.data.quotes.USD.price).toFixed(4));\n    const newCoinData = coinData.map( function ( values ) {\n      let newValues = { ...values };\n      if( valueChangeId === values.key){\n        newValues.price *= newPrice;\n      }\n      return newValues;\n\n    });\n    setCoinData(newCoinData);\n  }\n\n    return (\n      <>\n      <Div className=\"App\">\n        <AppHeader />\n        <AccountBalance amount = {balance} \n          showBalance={showBalance}\n          handleBalance = {handleBalance}\n        />\n        <CoinList coinData={coinData} \n          handleRefresh={handleRefresh}\n          showBalance={showBalance}\n        /> \n      </Div>\n      </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}